Diferential Digital Analizer (DDA).

It works for drawing lines.
Psuedocode:

Procedure dda(x1, y1, x2, y2 : integer)
	var
		dx, dy, steps, k: integer
		x_inc, y_inc, x, y: real
	begin
		dx = x2 - x1
		dy = y2 - y1
		if abs(dx) > abs(dy) then
			steps = abs(dx)
		else
			steps = abs(dy)
		end if

		x_inc = dx / steps
		y_inc = dy / steps
		x = x1
		y = y1
		set_pixel(round(x), round(y))
		for k = 1 to steps do
		begin
			x = x + x_inc
			y = y + y_inc
			set_pixel(round(x), round(y))
		end for
	end dda

Bresenham algorithm for drawing lines.
Input: line-ends (x1, y1), (x2, y2).
Deploy first point (x1, y1).
Calculate Dx = x2 - x1, Dy = y2 - y1, p1 = 2Dy - Dx. If p1 = 0, the next point
to draw is (x1 + 1, y1) and p_{k+1} = p_k + 2Dy - 2Dx, otherwise (x1 + 1, y1 + 1) and 
p_{k+1} = p_k + 2Dy. Increment x by unitary steps.
Repeat previous step Dx - 1 times.

Symtery Properties of the circle:
Calculate (x,y) in the circle for a theta <= 45Â°.
Draw the others using the following properties:
(x,y) 		//Original point
(y,x)
(-y, x)
(-x,y)
(-x,-y)
(-y,-x)
(y,-x)
(x,-y)
Works for circle centerd at the origin.

Write a program that draws each one of the follows. One program per figure.
	-Cardioide: r = a * (1 + cos(theta)).
	-Three leaves: r = a * cos(3 * theta).
	-Four leaves: r = a * cos(2 * theta).
	-Limacos: r = b + a * cos(theta).
	-Rose: r = 200 * cos(4 * theta).


